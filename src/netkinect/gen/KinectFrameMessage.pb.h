// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: KinectFrameMessage.proto

#ifndef PROTOBUF_KinectFrameMessage_2eproto__INCLUDED
#define PROTOBUF_KinectFrameMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_KinectFrameMessage_2eproto();
void protobuf_AssignDesc_KinectFrameMessage_2eproto();
void protobuf_ShutdownFile_KinectFrameMessage_2eproto();

class KinectFrameMessage;

// ===================================================================

class KinectFrameMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KinectFrameMessage) */ {
 public:
  KinectFrameMessage();
  virtual ~KinectFrameMessage();

  KinectFrameMessage(const KinectFrameMessage& from);

  inline KinectFrameMessage& operator=(const KinectFrameMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KinectFrameMessage& default_instance();

  void Swap(KinectFrameMessage* other);

  // implements Message ----------------------------------------------

  inline KinectFrameMessage* New() const { return New(NULL); }

  KinectFrameMessage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KinectFrameMessage& from);
  void MergeFrom(const KinectFrameMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(KinectFrameMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes fvideo_data = 1;
  void clear_fvideo_data();
  static const int kFvideoDataFieldNumber = 1;
  const ::std::string& fvideo_data() const;
  void set_fvideo_data(const ::std::string& value);
  void set_fvideo_data(const char* value);
  void set_fvideo_data(const void* value, size_t size);
  ::std::string* mutable_fvideo_data();
  ::std::string* release_fvideo_data();
  void set_allocated_fvideo_data(::std::string* fvideo_data);

  // optional bytes fdepth_data = 2;
  void clear_fdepth_data();
  static const int kFdepthDataFieldNumber = 2;
  const ::std::string& fdepth_data() const;
  void set_fdepth_data(const ::std::string& value);
  void set_fdepth_data(const char* value);
  void set_fdepth_data(const void* value, size_t size);
  ::std::string* mutable_fdepth_data();
  ::std::string* release_fdepth_data();
  void set_allocated_fdepth_data(::std::string* fdepth_data);

  // optional uint32 timestamp = 3;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 3;
  ::google::protobuf::uint32 timestamp() const;
  void set_timestamp(::google::protobuf::uint32 value);

  // repeated float cloud = 4;
  int cloud_size() const;
  void clear_cloud();
  static const int kCloudFieldNumber = 4;
  float cloud(int index) const;
  void set_cloud(int index, float value);
  void add_cloud(float value);
  const ::google::protobuf::RepeatedField< float >&
      cloud() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_cloud();

  // @@protoc_insertion_point(class_scope:KinectFrameMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr fvideo_data_;
  ::google::protobuf::internal::ArenaStringPtr fdepth_data_;
  ::google::protobuf::RepeatedField< float > cloud_;
  mutable int _cloud_cached_byte_size_;
  ::google::protobuf::uint32 timestamp_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_KinectFrameMessage_2eproto();
  friend void protobuf_AssignDesc_KinectFrameMessage_2eproto();
  friend void protobuf_ShutdownFile_KinectFrameMessage_2eproto();

  void InitAsDefaultInstance();
  static KinectFrameMessage* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// KinectFrameMessage

// optional bytes fvideo_data = 1;
inline void KinectFrameMessage::clear_fvideo_data() {
  fvideo_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& KinectFrameMessage::fvideo_data() const {
  // @@protoc_insertion_point(field_get:KinectFrameMessage.fvideo_data)
  return fvideo_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KinectFrameMessage::set_fvideo_data(const ::std::string& value) {
  
  fvideo_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KinectFrameMessage.fvideo_data)
}
inline void KinectFrameMessage::set_fvideo_data(const char* value) {
  
  fvideo_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KinectFrameMessage.fvideo_data)
}
inline void KinectFrameMessage::set_fvideo_data(const void* value, size_t size) {
  
  fvideo_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KinectFrameMessage.fvideo_data)
}
inline ::std::string* KinectFrameMessage::mutable_fvideo_data() {
  
  // @@protoc_insertion_point(field_mutable:KinectFrameMessage.fvideo_data)
  return fvideo_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* KinectFrameMessage::release_fvideo_data() {
  // @@protoc_insertion_point(field_release:KinectFrameMessage.fvideo_data)
  
  return fvideo_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KinectFrameMessage::set_allocated_fvideo_data(::std::string* fvideo_data) {
  if (fvideo_data != NULL) {
    
  } else {
    
  }
  fvideo_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fvideo_data);
  // @@protoc_insertion_point(field_set_allocated:KinectFrameMessage.fvideo_data)
}

// optional bytes fdepth_data = 2;
inline void KinectFrameMessage::clear_fdepth_data() {
  fdepth_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& KinectFrameMessage::fdepth_data() const {
  // @@protoc_insertion_point(field_get:KinectFrameMessage.fdepth_data)
  return fdepth_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KinectFrameMessage::set_fdepth_data(const ::std::string& value) {
  
  fdepth_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KinectFrameMessage.fdepth_data)
}
inline void KinectFrameMessage::set_fdepth_data(const char* value) {
  
  fdepth_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KinectFrameMessage.fdepth_data)
}
inline void KinectFrameMessage::set_fdepth_data(const void* value, size_t size) {
  
  fdepth_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KinectFrameMessage.fdepth_data)
}
inline ::std::string* KinectFrameMessage::mutable_fdepth_data() {
  
  // @@protoc_insertion_point(field_mutable:KinectFrameMessage.fdepth_data)
  return fdepth_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* KinectFrameMessage::release_fdepth_data() {
  // @@protoc_insertion_point(field_release:KinectFrameMessage.fdepth_data)
  
  return fdepth_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KinectFrameMessage::set_allocated_fdepth_data(::std::string* fdepth_data) {
  if (fdepth_data != NULL) {
    
  } else {
    
  }
  fdepth_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fdepth_data);
  // @@protoc_insertion_point(field_set_allocated:KinectFrameMessage.fdepth_data)
}

// optional uint32 timestamp = 3;
inline void KinectFrameMessage::clear_timestamp() {
  timestamp_ = 0u;
}
inline ::google::protobuf::uint32 KinectFrameMessage::timestamp() const {
  // @@protoc_insertion_point(field_get:KinectFrameMessage.timestamp)
  return timestamp_;
}
inline void KinectFrameMessage::set_timestamp(::google::protobuf::uint32 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:KinectFrameMessage.timestamp)
}

// repeated float cloud = 4;
inline int KinectFrameMessage::cloud_size() const {
  return cloud_.size();
}
inline void KinectFrameMessage::clear_cloud() {
  cloud_.Clear();
}
inline float KinectFrameMessage::cloud(int index) const {
  // @@protoc_insertion_point(field_get:KinectFrameMessage.cloud)
  return cloud_.Get(index);
}
inline void KinectFrameMessage::set_cloud(int index, float value) {
  cloud_.Set(index, value);
  // @@protoc_insertion_point(field_set:KinectFrameMessage.cloud)
}
inline void KinectFrameMessage::add_cloud(float value) {
  cloud_.Add(value);
  // @@protoc_insertion_point(field_add:KinectFrameMessage.cloud)
}
inline const ::google::protobuf::RepeatedField< float >&
KinectFrameMessage::cloud() const {
  // @@protoc_insertion_point(field_list:KinectFrameMessage.cloud)
  return cloud_;
}
inline ::google::protobuf::RepeatedField< float >*
KinectFrameMessage::mutable_cloud() {
  // @@protoc_insertion_point(field_mutable_list:KinectFrameMessage.cloud)
  return &cloud_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_KinectFrameMessage_2eproto__INCLUDED
