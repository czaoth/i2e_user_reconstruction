// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: KinectFrameMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "KinectFrameMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* KinectFrameMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KinectFrameMessage_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_KinectFrameMessage_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_KinectFrameMessage_2eproto() {
  protobuf_AddDesc_KinectFrameMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "KinectFrameMessage.proto");
  GOOGLE_CHECK(file != NULL);
  KinectFrameMessage_descriptor_ = file->message_type(0);
  static const int KinectFrameMessage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KinectFrameMessage, fvideo_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KinectFrameMessage, fdepth_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KinectFrameMessage, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KinectFrameMessage, cloud_),
  };
  KinectFrameMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      KinectFrameMessage_descriptor_,
      KinectFrameMessage::default_instance_,
      KinectFrameMessage_offsets_,
      -1,
      -1,
      -1,
      sizeof(KinectFrameMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KinectFrameMessage, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KinectFrameMessage, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_KinectFrameMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      KinectFrameMessage_descriptor_, &KinectFrameMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_KinectFrameMessage_2eproto() {
  delete KinectFrameMessage::default_instance_;
  delete KinectFrameMessage_reflection_;
}

void protobuf_AddDesc_KinectFrameMessage_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_KinectFrameMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030KinectFrameMessage.proto\"`\n\022KinectFram"
    "eMessage\022\023\n\013fvideo_data\030\001 \001(\014\022\023\n\013fdepth_"
    "data\030\002 \001(\014\022\021\n\ttimestamp\030\003 \001(\r\022\r\n\005cloud\030\004"
    " \003(\002b\006proto3", 132);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "KinectFrameMessage.proto", &protobuf_RegisterTypes);
  KinectFrameMessage::default_instance_ = new KinectFrameMessage();
  KinectFrameMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_KinectFrameMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_KinectFrameMessage_2eproto {
  StaticDescriptorInitializer_KinectFrameMessage_2eproto() {
    protobuf_AddDesc_KinectFrameMessage_2eproto();
  }
} static_descriptor_initializer_KinectFrameMessage_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KinectFrameMessage::kFvideoDataFieldNumber;
const int KinectFrameMessage::kFdepthDataFieldNumber;
const int KinectFrameMessage::kTimestampFieldNumber;
const int KinectFrameMessage::kCloudFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KinectFrameMessage::KinectFrameMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KinectFrameMessage)
}

void KinectFrameMessage::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

KinectFrameMessage::KinectFrameMessage(const KinectFrameMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:KinectFrameMessage)
}

void KinectFrameMessage::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  fvideo_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fdepth_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_ = 0u;
}

KinectFrameMessage::~KinectFrameMessage() {
  // @@protoc_insertion_point(destructor:KinectFrameMessage)
  SharedDtor();
}

void KinectFrameMessage::SharedDtor() {
  fvideo_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fdepth_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void KinectFrameMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KinectFrameMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KinectFrameMessage_descriptor_;
}

const KinectFrameMessage& KinectFrameMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KinectFrameMessage_2eproto();
  return *default_instance_;
}

KinectFrameMessage* KinectFrameMessage::default_instance_ = NULL;

KinectFrameMessage* KinectFrameMessage::New(::google::protobuf::Arena* arena) const {
  KinectFrameMessage* n = new KinectFrameMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KinectFrameMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:KinectFrameMessage)
  fvideo_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fdepth_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_ = 0u;
  cloud_.Clear();
}

bool KinectFrameMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KinectFrameMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes fvideo_data = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_fvideo_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_fdepth_data;
        break;
      }

      // optional bytes fdepth_data = 2;
      case 2: {
        if (tag == 18) {
         parse_fdepth_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_fdepth_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_timestamp;
        break;
      }

      // optional uint32 timestamp = 3;
      case 3: {
        if (tag == 24) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_cloud;
        break;
      }

      // repeated float cloud = 4;
      case 4: {
        if (tag == 34) {
         parse_cloud:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_cloud())));
        } else if (tag == 37) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 34, input, this->mutable_cloud())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KinectFrameMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KinectFrameMessage)
  return false;
#undef DO_
}

void KinectFrameMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KinectFrameMessage)
  // optional bytes fvideo_data = 1;
  if (this->fvideo_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->fvideo_data(), output);
  }

  // optional bytes fdepth_data = 2;
  if (this->fdepth_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->fdepth_data(), output);
  }

  // optional uint32 timestamp = 3;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->timestamp(), output);
  }

  // repeated float cloud = 4;
  if (this->cloud_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_cloud_cached_byte_size_);
  }
  for (int i = 0; i < this->cloud_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->cloud(i), output);
  }

  // @@protoc_insertion_point(serialize_end:KinectFrameMessage)
}

::google::protobuf::uint8* KinectFrameMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:KinectFrameMessage)
  // optional bytes fvideo_data = 1;
  if (this->fvideo_data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->fvideo_data(), target);
  }

  // optional bytes fdepth_data = 2;
  if (this->fdepth_data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->fdepth_data(), target);
  }

  // optional uint32 timestamp = 3;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->timestamp(), target);
  }

  // repeated float cloud = 4;
  if (this->cloud_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _cloud_cached_byte_size_, target);
  }
  for (int i = 0; i < this->cloud_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->cloud(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:KinectFrameMessage)
  return target;
}

int KinectFrameMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:KinectFrameMessage)
  int total_size = 0;

  // optional bytes fvideo_data = 1;
  if (this->fvideo_data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->fvideo_data());
  }

  // optional bytes fdepth_data = 2;
  if (this->fdepth_data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->fdepth_data());
  }

  // optional uint32 timestamp = 3;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->timestamp());
  }

  // repeated float cloud = 4;
  {
    int data_size = 0;
    data_size = 4 * this->cloud_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cloud_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KinectFrameMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KinectFrameMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const KinectFrameMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const KinectFrameMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KinectFrameMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KinectFrameMessage)
    MergeFrom(*source);
  }
}

void KinectFrameMessage::MergeFrom(const KinectFrameMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KinectFrameMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  cloud_.MergeFrom(from.cloud_);
  if (from.fvideo_data().size() > 0) {

    fvideo_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fvideo_data_);
  }
  if (from.fdepth_data().size() > 0) {

    fdepth_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fdepth_data_);
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
}

void KinectFrameMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KinectFrameMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KinectFrameMessage::CopyFrom(const KinectFrameMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KinectFrameMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KinectFrameMessage::IsInitialized() const {

  return true;
}

void KinectFrameMessage::Swap(KinectFrameMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KinectFrameMessage::InternalSwap(KinectFrameMessage* other) {
  fvideo_data_.Swap(&other->fvideo_data_);
  fdepth_data_.Swap(&other->fdepth_data_);
  std::swap(timestamp_, other->timestamp_);
  cloud_.UnsafeArenaSwap(&other->cloud_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KinectFrameMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KinectFrameMessage_descriptor_;
  metadata.reflection = KinectFrameMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KinectFrameMessage

// optional bytes fvideo_data = 1;
void KinectFrameMessage::clear_fvideo_data() {
  fvideo_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& KinectFrameMessage::fvideo_data() const {
  // @@protoc_insertion_point(field_get:KinectFrameMessage.fvideo_data)
  return fvideo_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void KinectFrameMessage::set_fvideo_data(const ::std::string& value) {
  
  fvideo_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KinectFrameMessage.fvideo_data)
}
 void KinectFrameMessage::set_fvideo_data(const char* value) {
  
  fvideo_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KinectFrameMessage.fvideo_data)
}
 void KinectFrameMessage::set_fvideo_data(const void* value, size_t size) {
  
  fvideo_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KinectFrameMessage.fvideo_data)
}
 ::std::string* KinectFrameMessage::mutable_fvideo_data() {
  
  // @@protoc_insertion_point(field_mutable:KinectFrameMessage.fvideo_data)
  return fvideo_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* KinectFrameMessage::release_fvideo_data() {
  // @@protoc_insertion_point(field_release:KinectFrameMessage.fvideo_data)
  
  return fvideo_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void KinectFrameMessage::set_allocated_fvideo_data(::std::string* fvideo_data) {
  if (fvideo_data != NULL) {
    
  } else {
    
  }
  fvideo_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fvideo_data);
  // @@protoc_insertion_point(field_set_allocated:KinectFrameMessage.fvideo_data)
}

// optional bytes fdepth_data = 2;
void KinectFrameMessage::clear_fdepth_data() {
  fdepth_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& KinectFrameMessage::fdepth_data() const {
  // @@protoc_insertion_point(field_get:KinectFrameMessage.fdepth_data)
  return fdepth_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void KinectFrameMessage::set_fdepth_data(const ::std::string& value) {
  
  fdepth_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KinectFrameMessage.fdepth_data)
}
 void KinectFrameMessage::set_fdepth_data(const char* value) {
  
  fdepth_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KinectFrameMessage.fdepth_data)
}
 void KinectFrameMessage::set_fdepth_data(const void* value, size_t size) {
  
  fdepth_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KinectFrameMessage.fdepth_data)
}
 ::std::string* KinectFrameMessage::mutable_fdepth_data() {
  
  // @@protoc_insertion_point(field_mutable:KinectFrameMessage.fdepth_data)
  return fdepth_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* KinectFrameMessage::release_fdepth_data() {
  // @@protoc_insertion_point(field_release:KinectFrameMessage.fdepth_data)
  
  return fdepth_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void KinectFrameMessage::set_allocated_fdepth_data(::std::string* fdepth_data) {
  if (fdepth_data != NULL) {
    
  } else {
    
  }
  fdepth_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fdepth_data);
  // @@protoc_insertion_point(field_set_allocated:KinectFrameMessage.fdepth_data)
}

// optional uint32 timestamp = 3;
void KinectFrameMessage::clear_timestamp() {
  timestamp_ = 0u;
}
 ::google::protobuf::uint32 KinectFrameMessage::timestamp() const {
  // @@protoc_insertion_point(field_get:KinectFrameMessage.timestamp)
  return timestamp_;
}
 void KinectFrameMessage::set_timestamp(::google::protobuf::uint32 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:KinectFrameMessage.timestamp)
}

// repeated float cloud = 4;
int KinectFrameMessage::cloud_size() const {
  return cloud_.size();
}
void KinectFrameMessage::clear_cloud() {
  cloud_.Clear();
}
 float KinectFrameMessage::cloud(int index) const {
  // @@protoc_insertion_point(field_get:KinectFrameMessage.cloud)
  return cloud_.Get(index);
}
 void KinectFrameMessage::set_cloud(int index, float value) {
  cloud_.Set(index, value);
  // @@protoc_insertion_point(field_set:KinectFrameMessage.cloud)
}
 void KinectFrameMessage::add_cloud(float value) {
  cloud_.Add(value);
  // @@protoc_insertion_point(field_add:KinectFrameMessage.cloud)
}
 const ::google::protobuf::RepeatedField< float >&
KinectFrameMessage::cloud() const {
  // @@protoc_insertion_point(field_list:KinectFrameMessage.cloud)
  return cloud_;
}
 ::google::protobuf::RepeatedField< float >*
KinectFrameMessage::mutable_cloud() {
  // @@protoc_insertion_point(field_mutable_list:KinectFrameMessage.cloud)
  return &cloud_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
