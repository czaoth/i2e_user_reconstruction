// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ConnectionMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ConnectionMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* ConnectionMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConnectionMessage_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ConnectionMessage_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_ConnectionMessage_2eproto() {
  protobuf_AddDesc_ConnectionMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ConnectionMessage.proto");
  GOOGLE_CHECK(file != NULL);
  ConnectionMessage_descriptor_ = file->message_type(0);
  static const int ConnectionMessage_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionMessage, is_leader_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionMessage, use_point_cloud_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionMessage, video_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionMessage, video_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionMessage, depth_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionMessage, depth_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionMessage, message_size_),
  };
  ConnectionMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ConnectionMessage_descriptor_,
      ConnectionMessage::default_instance_,
      ConnectionMessage_offsets_,
      -1,
      -1,
      -1,
      sizeof(ConnectionMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionMessage, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionMessage, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ConnectionMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ConnectionMessage_descriptor_, &ConnectionMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ConnectionMessage_2eproto() {
  delete ConnectionMessage::default_instance_;
  delete ConnectionMessage_reflection_;
}

void protobuf_AddDesc_ConnectionMessage_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_ConnectionMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027ConnectionMessage.proto\"\253\001\n\021Connection"
    "Message\022\021\n\tis_leader\030\001 \001(\010\022\027\n\017use_point_"
    "cloud\030\002 \001(\010\022\024\n\014video_height\030\003 \001(\r\022\023\n\013vid"
    "eo_width\030\004 \001(\r\022\024\n\014depth_height\030\005 \001(\r\022\023\n\013"
    "depth_width\030\006 \001(\r\022\024\n\014message_size\030\007 \001(\rb"
    "\006proto3", 207);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ConnectionMessage.proto", &protobuf_RegisterTypes);
  ConnectionMessage::default_instance_ = new ConnectionMessage();
  ConnectionMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ConnectionMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ConnectionMessage_2eproto {
  StaticDescriptorInitializer_ConnectionMessage_2eproto() {
    protobuf_AddDesc_ConnectionMessage_2eproto();
  }
} static_descriptor_initializer_ConnectionMessage_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConnectionMessage::kIsLeaderFieldNumber;
const int ConnectionMessage::kUsePointCloudFieldNumber;
const int ConnectionMessage::kVideoHeightFieldNumber;
const int ConnectionMessage::kVideoWidthFieldNumber;
const int ConnectionMessage::kDepthHeightFieldNumber;
const int ConnectionMessage::kDepthWidthFieldNumber;
const int ConnectionMessage::kMessageSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConnectionMessage::ConnectionMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConnectionMessage)
}

void ConnectionMessage::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ConnectionMessage::ConnectionMessage(const ConnectionMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConnectionMessage)
}

void ConnectionMessage::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  is_leader_ = false;
  use_point_cloud_ = false;
  video_height_ = 0u;
  video_width_ = 0u;
  depth_height_ = 0u;
  depth_width_ = 0u;
  message_size_ = 0u;
}

ConnectionMessage::~ConnectionMessage() {
  // @@protoc_insertion_point(destructor:ConnectionMessage)
  SharedDtor();
}

void ConnectionMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ConnectionMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConnectionMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConnectionMessage_descriptor_;
}

const ConnectionMessage& ConnectionMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConnectionMessage_2eproto();
  return *default_instance_;
}

ConnectionMessage* ConnectionMessage::default_instance_ = NULL;

ConnectionMessage* ConnectionMessage::New(::google::protobuf::Arena* arena) const {
  ConnectionMessage* n = new ConnectionMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConnectionMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ConnectionMessage)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ConnectionMessage, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ConnectionMessage*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(is_leader_, message_size_);

#undef ZR_HELPER_
#undef ZR_

}

bool ConnectionMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConnectionMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_leader = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_leader_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_use_point_cloud;
        break;
      }

      // optional bool use_point_cloud = 2;
      case 2: {
        if (tag == 16) {
         parse_use_point_cloud:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_point_cloud_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_video_height;
        break;
      }

      // optional uint32 video_height = 3;
      case 3: {
        if (tag == 24) {
         parse_video_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &video_height_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_video_width;
        break;
      }

      // optional uint32 video_width = 4;
      case 4: {
        if (tag == 32) {
         parse_video_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &video_width_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_depth_height;
        break;
      }

      // optional uint32 depth_height = 5;
      case 5: {
        if (tag == 40) {
         parse_depth_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &depth_height_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_depth_width;
        break;
      }

      // optional uint32 depth_width = 6;
      case 6: {
        if (tag == 48) {
         parse_depth_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &depth_width_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_message_size;
        break;
      }

      // optional uint32 message_size = 7;
      case 7: {
        if (tag == 56) {
         parse_message_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &message_size_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConnectionMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConnectionMessage)
  return false;
#undef DO_
}

void ConnectionMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConnectionMessage)
  // optional bool is_leader = 1;
  if (this->is_leader() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_leader(), output);
  }

  // optional bool use_point_cloud = 2;
  if (this->use_point_cloud() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->use_point_cloud(), output);
  }

  // optional uint32 video_height = 3;
  if (this->video_height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->video_height(), output);
  }

  // optional uint32 video_width = 4;
  if (this->video_width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->video_width(), output);
  }

  // optional uint32 depth_height = 5;
  if (this->depth_height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->depth_height(), output);
  }

  // optional uint32 depth_width = 6;
  if (this->depth_width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->depth_width(), output);
  }

  // optional uint32 message_size = 7;
  if (this->message_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->message_size(), output);
  }

  // @@protoc_insertion_point(serialize_end:ConnectionMessage)
}

::google::protobuf::uint8* ConnectionMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConnectionMessage)
  // optional bool is_leader = 1;
  if (this->is_leader() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_leader(), target);
  }

  // optional bool use_point_cloud = 2;
  if (this->use_point_cloud() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->use_point_cloud(), target);
  }

  // optional uint32 video_height = 3;
  if (this->video_height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->video_height(), target);
  }

  // optional uint32 video_width = 4;
  if (this->video_width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->video_width(), target);
  }

  // optional uint32 depth_height = 5;
  if (this->depth_height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->depth_height(), target);
  }

  // optional uint32 depth_width = 6;
  if (this->depth_width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->depth_width(), target);
  }

  // optional uint32 message_size = 7;
  if (this->message_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->message_size(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ConnectionMessage)
  return target;
}

int ConnectionMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ConnectionMessage)
  int total_size = 0;

  // optional bool is_leader = 1;
  if (this->is_leader() != 0) {
    total_size += 1 + 1;
  }

  // optional bool use_point_cloud = 2;
  if (this->use_point_cloud() != 0) {
    total_size += 1 + 1;
  }

  // optional uint32 video_height = 3;
  if (this->video_height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->video_height());
  }

  // optional uint32 video_width = 4;
  if (this->video_width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->video_width());
  }

  // optional uint32 depth_height = 5;
  if (this->depth_height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->depth_height());
  }

  // optional uint32 depth_width = 6;
  if (this->depth_width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->depth_width());
  }

  // optional uint32 message_size = 7;
  if (this->message_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->message_size());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConnectionMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ConnectionMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ConnectionMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ConnectionMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ConnectionMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ConnectionMessage)
    MergeFrom(*source);
  }
}

void ConnectionMessage::MergeFrom(const ConnectionMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ConnectionMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.is_leader() != 0) {
    set_is_leader(from.is_leader());
  }
  if (from.use_point_cloud() != 0) {
    set_use_point_cloud(from.use_point_cloud());
  }
  if (from.video_height() != 0) {
    set_video_height(from.video_height());
  }
  if (from.video_width() != 0) {
    set_video_width(from.video_width());
  }
  if (from.depth_height() != 0) {
    set_depth_height(from.depth_height());
  }
  if (from.depth_width() != 0) {
    set_depth_width(from.depth_width());
  }
  if (from.message_size() != 0) {
    set_message_size(from.message_size());
  }
}

void ConnectionMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ConnectionMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectionMessage::CopyFrom(const ConnectionMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ConnectionMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectionMessage::IsInitialized() const {

  return true;
}

void ConnectionMessage::Swap(ConnectionMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConnectionMessage::InternalSwap(ConnectionMessage* other) {
  std::swap(is_leader_, other->is_leader_);
  std::swap(use_point_cloud_, other->use_point_cloud_);
  std::swap(video_height_, other->video_height_);
  std::swap(video_width_, other->video_width_);
  std::swap(depth_height_, other->depth_height_);
  std::swap(depth_width_, other->depth_width_);
  std::swap(message_size_, other->message_size_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConnectionMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConnectionMessage_descriptor_;
  metadata.reflection = ConnectionMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConnectionMessage

// optional bool is_leader = 1;
void ConnectionMessage::clear_is_leader() {
  is_leader_ = false;
}
 bool ConnectionMessage::is_leader() const {
  // @@protoc_insertion_point(field_get:ConnectionMessage.is_leader)
  return is_leader_;
}
 void ConnectionMessage::set_is_leader(bool value) {
  
  is_leader_ = value;
  // @@protoc_insertion_point(field_set:ConnectionMessage.is_leader)
}

// optional bool use_point_cloud = 2;
void ConnectionMessage::clear_use_point_cloud() {
  use_point_cloud_ = false;
}
 bool ConnectionMessage::use_point_cloud() const {
  // @@protoc_insertion_point(field_get:ConnectionMessage.use_point_cloud)
  return use_point_cloud_;
}
 void ConnectionMessage::set_use_point_cloud(bool value) {
  
  use_point_cloud_ = value;
  // @@protoc_insertion_point(field_set:ConnectionMessage.use_point_cloud)
}

// optional uint32 video_height = 3;
void ConnectionMessage::clear_video_height() {
  video_height_ = 0u;
}
 ::google::protobuf::uint32 ConnectionMessage::video_height() const {
  // @@protoc_insertion_point(field_get:ConnectionMessage.video_height)
  return video_height_;
}
 void ConnectionMessage::set_video_height(::google::protobuf::uint32 value) {
  
  video_height_ = value;
  // @@protoc_insertion_point(field_set:ConnectionMessage.video_height)
}

// optional uint32 video_width = 4;
void ConnectionMessage::clear_video_width() {
  video_width_ = 0u;
}
 ::google::protobuf::uint32 ConnectionMessage::video_width() const {
  // @@protoc_insertion_point(field_get:ConnectionMessage.video_width)
  return video_width_;
}
 void ConnectionMessage::set_video_width(::google::protobuf::uint32 value) {
  
  video_width_ = value;
  // @@protoc_insertion_point(field_set:ConnectionMessage.video_width)
}

// optional uint32 depth_height = 5;
void ConnectionMessage::clear_depth_height() {
  depth_height_ = 0u;
}
 ::google::protobuf::uint32 ConnectionMessage::depth_height() const {
  // @@protoc_insertion_point(field_get:ConnectionMessage.depth_height)
  return depth_height_;
}
 void ConnectionMessage::set_depth_height(::google::protobuf::uint32 value) {
  
  depth_height_ = value;
  // @@protoc_insertion_point(field_set:ConnectionMessage.depth_height)
}

// optional uint32 depth_width = 6;
void ConnectionMessage::clear_depth_width() {
  depth_width_ = 0u;
}
 ::google::protobuf::uint32 ConnectionMessage::depth_width() const {
  // @@protoc_insertion_point(field_get:ConnectionMessage.depth_width)
  return depth_width_;
}
 void ConnectionMessage::set_depth_width(::google::protobuf::uint32 value) {
  
  depth_width_ = value;
  // @@protoc_insertion_point(field_set:ConnectionMessage.depth_width)
}

// optional uint32 message_size = 7;
void ConnectionMessage::clear_message_size() {
  message_size_ = 0u;
}
 ::google::protobuf::uint32 ConnectionMessage::message_size() const {
  // @@protoc_insertion_point(field_get:ConnectionMessage.message_size)
  return message_size_;
}
 void ConnectionMessage::set_message_size(::google::protobuf::uint32 value) {
  
  message_size_ = value;
  // @@protoc_insertion_point(field_set:ConnectionMessage.message_size)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
